{
  "hash": "82bbe392e82487382f704998ab0d47fa",
  "result": {
    "markdown": "---\ntitle: \"Anomaly Detection\"\nauthor: \"Shadab Haque\"\ndate: \"2023-12-11\"\ncategories: [ Anomaly Detection]\nimage: \"image.png\"\n\n---\n\n# Title: Anomaly Detection with the Digits Dataset using One-Class SVM:\nAnomaly detection is an essential process in various fields for identifying unusual patterns or data points that significantly deviate from the majority. These anomalies can be point anomalies, contextual anomalies, or collective anomalies, depending on their characteristics. Techniques for anomaly detection span a wide range, from statistical methods like Z-score and Gaussian distribution to machine learning approaches such as Isolation Forest and Autoencoders, and even deep learning neural networks.\n# Data Preprocessing:\nIn this analysis, we'll employ the Digits dataset, a well-known dataset in machine learning consisting of 8x8 pixel images of handwritten digits. Our chosen method for detecting anomalies is the One-Class SVM algorithm. This technique is particularly adept at identifying outliers in datasets where anomalies are not explicitly labeled. The first step involves loading the Digits dataset and preprocessing it, which includes standardization to normalize the data.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import OneClassSVM\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import load_digits\n\n# Load the Digits dataset\ndigits = load_digits()\nX = digits.data\n\n# Standardize the data\nscaler = StandardScaler()\nX_std = scaler.fit_transform(X)\n```\n:::\n\n\n# Applying One-Class SVM for Anomaly Detection\nOne-Class SVM is a specialized version of the Support Vector Machine algorithm that is used for anomaly detection. It works by identifying the smallest sphere that encloses the data in a high-dimensional space. Data points that lie outside this sphere are considered anomalies or outliers.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Define and fit the One-Class SVM model\nmodel = OneClassSVM(kernel='rbf', gamma='auto', nu=0.05)\nmodel.fit(X_std)\n\n# Predict anomalies (outliers are labeled as -1)\ny_pred = model.predict(X_std)\n```\n:::\n\n\n# Visualization of Anomalies:\nVisualizing the results is crucial for understanding the model's performance. We will display some of the digit images classified as anomalies by our One-Class SVM model, providing a visual perspective on what the model perceives as outliers.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Filtering out the anomaly images\nanomaly_indices = np.where(y_pred == -1)\nanomaly_images = digits.images[anomaly_indices]\n\n# Plotting the anomaly images\nplt.figure(figsize=(10, 2))\nfor i, image in enumerate(anomaly_images[:5]):\n    plt.subplot(1, 5, i + 1)\n    plt.imshow(image, cmap='gray')\n    plt.axis('off')\nplt.suptitle('Anomaly Detected Images using One-Class SVM')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=763 height=176}\n:::\n:::\n\n\nThis visualization offers insights into the types of digit images that are flagged as anomalies by the One-Class SVM. By using this algorithm on the Digits dataset, we can effectively isolate unusual or atypical digit representations. Such capability is invaluable in scenarios where it is crucial to identify outlying data points that could signify errors, fraud, or rare events. The One-Class SVM algorithm's strength lies in its ability to learn a decision function based on the 'normal' data and use this to identify data points that deviate from this norm, making it a powerful tool for anomaly detection in various applications.\n\nHistogram of Anomaly Scores:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Compute the anomaly scores using the One-Class SVM decision function\nanomaly_scores = model.decision_function(X_std)\n\n# Plotting the histogram of anomaly scores\nplt.figure(figsize=(8, 4))\nplt.hist(anomaly_scores, bins=50, color='blue', alpha=0.7)\nplt.title('Histogram of Anomaly Scores')\nplt.xlabel('Anomaly Score')\nplt.ylabel('Frequency')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=667 height=376}\n:::\n:::\n\n\nWe can visualize the distribution of anomaly scores assigned by the One-Class SVM model. These scores indicate how far away each data point is from the decision boundary.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}